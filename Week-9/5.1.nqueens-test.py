import sys
import importlib.util
from io import StringIO
import ast

# 모듈 이름과 테스트 케이스 정의
module_name = "nqueens_algo"

# 각 예제에 대한 입력 n과 기대하는 솔루션 리스트
# expected는 found= 뒤에 출력되는 컬럼(position) 리스트들의 모음
# n=4,5는 해답을 모두 직접 나열했고,
# n=6,7,8는 실제 해답 갯수가 많아 주석으로 표시했습니다.
test_cases = [
    {
        "n": 4,
        "expected": [
            [2, 4, 1, 3],
            [3, 1, 4, 2]
        ],
        "desc": "4-퀸 예제"
    },
    {
        "n": 5,
        "expected": [
            [1, 3, 5, 2, 4],
            [1, 4, 2, 5, 3],
            [2, 4, 1, 3, 5],
            [2, 5, 3, 1, 4],
            [3, 1, 4, 2, 5],
            [3, 5, 2, 4, 1],
            [4, 1, 3, 5, 2],
            [4, 2, 5, 3, 1],
            [5, 2, 4, 1, 3],
            [5, 3, 1, 4, 2]
        ],
        "desc": "5-퀸 예제"
    },
    {
        "n": 6,
        "expected": [
            [2, 4, 6, 1, 3, 5],
            [3, 6, 2, 5, 1, 4],
            [4, 1, 5, 2, 6, 3],
            [5, 3, 1, 6, 4, 2]
        ],
        "desc": "6-퀸 예제"
    },
    {
        "n": 7,
        "expected": [
            [1, 3, 5, 7, 2, 4, 6],
            [1, 4, 7, 3, 6, 2, 5],
            [1, 5, 2, 6, 3, 7, 4],
            [1, 6, 4, 2, 7, 5, 3],
            [2, 4, 1, 7, 5, 3, 6],
            [2, 4, 6, 1, 3, 5, 7],
            [2, 5, 1, 4, 7, 3, 6],
            [2, 5, 3, 1, 7, 4, 6],
            [2, 5, 7, 4, 1, 3, 6],
            [2, 6, 3, 7, 4, 1, 5],
            [2, 7, 5, 3, 1, 6, 4],
            [3, 1, 6, 2, 5, 7, 4],
            [3, 1, 6, 4, 2, 7, 5],
            [3, 5, 7, 2, 4, 6, 1],
            [3, 6, 2, 5, 1, 4, 7],
            [3, 7, 2, 4, 6, 1, 5],
            [3, 7, 4, 1, 5, 2, 6],
            [4, 1, 3, 6, 2, 7, 5],
            [4, 1, 5, 2, 6, 3, 7],
            [4, 2, 7, 5, 3, 1, 6],
            [4, 6, 1, 3, 5, 7, 2],
            [4, 7, 3, 6, 2, 5, 1],
            [4, 7, 5, 2, 6, 1, 3],
            [5, 1, 4, 7, 3, 6, 2],
            [5, 1, 6, 4, 2, 7, 3],
            [5, 2, 6, 3, 7, 4, 1],
            [5, 3, 1, 6, 4, 2, 7],
            [5, 7, 2, 4, 6, 1, 3],
            [5, 7, 2, 6, 3, 1, 4],
            [6, 1, 3, 5, 7, 2, 4],
            [6, 2, 5, 1, 4, 7, 3],
            [6, 3, 1, 4, 7, 5, 2],
            [6, 3, 5, 7, 1, 4, 2],
            [6, 3, 7, 4, 1, 5, 2],
            [6, 4, 2, 7, 5, 3, 1],
            [6, 4, 7, 1, 3, 5, 2],
            [7, 2, 4, 6, 1, 3, 5],
            [7, 3, 6, 2, 5, 1, 4],
            [7, 4, 1, 5, 2, 6, 3],
            [7, 5, 3, 1, 6, 4, 2]
        ],
        "desc": "7-퀸 예제"
    },
    {
        "n": 8,
        "expected": [
            [1, 5, 8, 6, 3, 7, 2, 4],
            [1, 6, 8, 3, 7, 4, 2, 5],
            [1, 7, 4, 6, 8, 2, 5, 3],
            [1, 7, 5, 8, 2, 4, 6, 3],
            [2, 4, 6, 8, 3, 1, 7, 5],
            [2, 5, 7, 1, 3, 8, 6, 4],
            [2, 5, 7, 4, 1, 8, 6, 3],
            [2, 6, 1, 7, 4, 8, 3, 5],
            [2, 6, 8, 3, 1, 4, 7, 5],
            [2, 7, 3, 6, 8, 5, 1, 4],
            [2, 7, 5, 8, 1, 4, 6, 3],
            [2, 8, 6, 1, 3, 5, 7, 4],
            [3, 1, 7, 5, 8, 2, 4, 6],
            [3, 5, 2, 8, 1, 7, 4, 6],
            [3, 5, 2, 8, 6, 4, 7, 1],
            [3, 5, 7, 1, 4, 2, 8, 6],
            [3, 5, 8, 4, 1, 7, 2, 6],
            [3, 6, 2, 5, 8, 1, 7, 4],
            [3, 6, 2, 7, 1, 4, 8, 5],
            [3, 6, 2, 7, 5, 1, 8, 4],
            [3, 6, 4, 1, 8, 5, 7, 2],
            [3, 6, 4, 2, 8, 5, 7, 1],
            [3, 6, 8, 1, 4, 7, 5, 2],
            [3, 6, 8, 1, 5, 7, 2, 4],
            [3, 6, 8, 2, 4, 1, 7, 5],
            [3, 7, 2, 8, 5, 1, 4, 6],
            [3, 7, 2, 8, 6, 4, 1, 5],
            [3, 8, 4, 7, 1, 6, 2, 5],
            [4, 1, 5, 8, 2, 7, 3, 6],
            [4, 1, 5, 8, 6, 3, 7, 2],
            [4, 2, 5, 8, 6, 1, 3, 7],
            [4, 2, 7, 3, 6, 8, 1, 5],
            [4, 2, 7, 3, 6, 8, 5, 1],
            [4, 2, 7, 5, 1, 8, 6, 3],
            [4, 2, 8, 5, 7, 1, 3, 6],
            [4, 2, 8, 6, 1, 3, 5, 7],
            [4, 6, 1, 5, 2, 8, 3, 7],
            [4, 6, 8, 2, 7, 1, 3, 5],
            [4, 6, 8, 3, 1, 7, 5, 2],
            [4, 7, 1, 8, 5, 2, 6, 3],
            [4, 7, 3, 8, 2, 5, 1, 6],
            [4, 7, 5, 2, 6, 1, 3, 8],
            [4, 7, 5, 3, 1, 6, 8, 2],
            [4, 8, 1, 3, 6, 2, 7, 5],
            [4, 8, 1, 5, 7, 2, 6, 3],
            [4, 8, 5, 3, 1, 7, 2, 6],
            [5, 1, 4, 6, 8, 2, 7, 3],
            [5, 1, 8, 4, 2, 7, 3, 6],
            [5, 1, 8, 6, 3, 7, 2, 4],
            [5, 2, 4, 6, 8, 3, 1, 7],
            [5, 2, 4, 7, 3, 8, 6, 1],
            [5, 2, 6, 1, 7, 4, 8, 3],
            [5, 2, 8, 1, 4, 7, 3, 6],
            [5, 3, 1, 6, 8, 2, 4, 7],
            [5, 3, 1, 7, 2, 8, 6, 4],
            [5, 3, 8, 4, 7, 1, 6, 2],
            [5, 7, 1, 3, 8, 6, 4, 2],
            [5, 7, 1, 4, 2, 8, 6, 3],
            [5, 7, 2, 4, 8, 1, 3, 6],
            [5, 7, 2, 6, 3, 1, 4, 8],
            [5, 7, 2, 6, 3, 1, 8, 4],
            [5, 7, 4, 1, 3, 8, 6, 2],
            [5, 8, 4, 1, 3, 6, 2, 7],
            [5, 8, 4, 1, 7, 2, 6, 3],
            [6, 1, 5, 2, 8, 3, 7, 4],
            [6, 2, 7, 1, 3, 5, 8, 4],
            [6, 2, 7, 1, 4, 8, 5, 3],
            [6, 3, 1, 7, 5, 8, 2, 4],
            [6, 3, 1, 8, 4, 2, 7, 5],
            [6, 3, 1, 8, 5, 2, 4, 7],
            [6, 3, 5, 7, 1, 4, 2, 8],
            [6, 3, 5, 8, 1, 4, 2, 7],
            [6, 3, 7, 2, 4, 8, 1, 5],
            [6, 3, 7, 2, 8, 5, 1, 4],
            [6, 3, 7, 4, 1, 8, 2, 5],
            [6, 4, 1, 5, 8, 2, 7, 3],
            [6, 4, 2, 8, 5, 7, 1, 3],
            [6, 4, 7, 1, 3, 5, 2, 8],
            [6, 4, 7, 1, 8, 2, 5, 3],
            [6, 8, 2, 4, 1, 7, 5, 3],
            [7, 1, 3, 8, 6, 4, 2, 5],
            [7, 2, 4, 1, 8, 5, 3, 6],
            [7, 2, 6, 3, 1, 4, 8, 5],
            [7, 3, 1, 6, 8, 5, 2, 4],
            [7, 3, 8, 2, 5, 1, 6, 4],
            [7, 4, 2, 5, 8, 1, 3, 6],
            [7, 4, 2, 8, 6, 1, 3, 5],
            [7, 5, 3, 1, 6, 8, 2, 4],
            [8, 2, 4, 1, 7, 5, 3, 6],
            [8, 2, 5, 3, 1, 7, 4, 6],
            [8, 3, 1, 6, 2, 5, 7, 4],
            [8, 4, 1, 3, 6, 2, 7, 5]
        ],
        "desc": "8-퀸 예제"
    }
]

def run_test_cases(file_path='5.1.nqueens.py'):
    # 모듈 로드
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    nqueens_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(nqueens_module)
    nqueens = nqueens_module.nqueens

    passed = 0
    total = len(test_cases)

    for i, case in enumerate(test_cases, 1):
        n = case["n"]
        expected = case["expected"]
        desc = case["desc"]

        print(f"######Example {i}######")
        print(f"Input n = {n}")

        # 결과 캡처
        old_stdout = sys.stdout
        sys.stdout = StringIO()
        col = [0] * (n + 1)
        nqueens(0, n, col)
        output = sys.stdout.getvalue().strip().splitlines()
        sys.stdout = old_stdout

        # "found=" 라인 파싱
        actual = []
        for line in output:
            if line.startswith("found="):
                lst = ast.literal_eval(line.split('=',1)[1].strip())
                actual.append(lst)

        # 순서 무관 비교
        actual_set = set(tuple(x) for x in actual)
        expected_set = set(tuple(x) for x in expected)

        if actual_set == expected_set:
            print(f"✅ Passed: {len(actual)} solutions matched expected")
            passed += 1
        else:
            print(f"❌ Failed: expected {len(expected)} solutions, got {len(actual)}")
            print(f" Expected: {expected}")
            print(f" Got: {actual}")
        print()

    print(f"✅ {passed}/{total} 테스트 케이스 통과")
    return passed, total

if __name__ == "__main__":
    run_test_cases()
